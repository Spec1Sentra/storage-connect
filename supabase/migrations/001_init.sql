-- Enable PostgreSQL extensions
create extension if not exists "postgis" with schema "extensions";
create extension if not exists "vector" with schema "extensions";

-- For Supabase to work with PostGIS, we need to grant usage to the 'postgres' role
grant usage on schema "public" to "postgres";
grant usage on schema "public" to "anon";
grant usage on schema "public" to "authenticated";

-- And the same for the extensions schema
grant usage on schema "extensions" to "postgres";
grant usage on schema "extensions" to "anon";
grant usage on schema "extensions" to "authenticated";

--
-- DEFINE CUSTOM TYPES (ENUMS)
--
create type public.item_status as enum ('draft', 'active', 'claimed', 'expired', 'review');
create type public.claim_status as enum ('pending', 'approved', 'rejected');
create type public.report_status as enum ('pending', 'resolved');
create type public.tag_source as enum ('user', 'cloud_vision', 'gemini');

--
-- CREATE TABLES
--

-- Profiles table to store public user data, linked to auth.users
create table public.profiles (
    id uuid references auth.users(id) on delete cascade not null primary key,
    updated_at timestamp with time zone,
    display_name text,
    avatar_url text,
    is_anonymized boolean default true not null,
    e2ee_enabled boolean default false not null
);
comment on column public.profiles.id is 'Reference to the auth.users table.';
comment on column public.profiles.is_anonymized is 'If true, a generic display name should be shown.';
comment on column public.profiles.e2ee_enabled is 'User preference for end-to-end encryption.';

-- Storage facilities table
create table public.facilities (
    id bigint generated by default as identity primary key,
    created_at timestamp with time zone not null default now(),
    name text not null,
    address text,
    city text,
    state text,
    zip_code text,
    location geography(Point, 4326)
);
create index facilities_location_idx on public.facilities using gist (location);

-- Storage units table
create table public.units (
    id bigint generated by default as identity primary key,
    created_at timestamp with time zone not null default now(),
    facility_id bigint references public.facilities(id) on delete set null,
    unit_number text not null,
    auction_date date,
    buyer_id uuid references public.profiles(id) on delete set null
);
comment on column public.units.buyer_id is 'The user who bought the unit and is listing items.';

-- Items table for found items
create table public.items (
    id bigint generated by default as identity primary key,
    created_at timestamp with time zone not null default now(),
    updated_at timestamp with time zone,
    created_by uuid references public.profiles(id) on delete cascade not null,
    unit_id bigint references public.units(id) on delete set null,
    title text not null,
    description text,
    description_auto text,
    is_sentimental boolean default false not null,
    status public.item_status default 'draft' not null,
    expires_at timestamp with time zone,
    location geography(Point, 4326),
    tsv tsvector generated always as (to_tsvector('english', coalesce(title, '') || ' ' || coalesce(description, '') || ' ' || coalesce(description_auto, ''))) stored
);
create index items_created_by_idx on public.items (created_by);
create index items_status_idx on public.items (status);
create index items_location_idx on public.items using gist (location);
create index items_tsv_idx on public.items using gin (tsv);
comment on column public.items.description_auto is 'Description automatically generated by AI.';

-- Images table for item photos
create table public.images (
    id bigint generated by default as identity primary key,
    created_at timestamp with time zone not null default now(),
    item_id bigint references public.items(id) on delete cascade not null,
    created_by uuid references public.profiles(id) on delete cascade not null,
    storage_path_raw text not null unique,
    storage_path_thumbnail text,
    has_pii boolean default false not null,
    moderation_status public.report_status default 'pending' not null
);
create index images_item_id_idx on public.images (item_id);

-- Tags table
create table public.tags (
    id bigint generated by default as identity primary key,
    name text not null unique
);
create index tags_name_idx on public.tags (name);

-- Item-Tags join table
create table public.item_tags (
    item_id bigint references public.items(id) on delete cascade not null,
    tag_id bigint references public.tags(id) on delete cascade not null,
    confidence real,
    source public.tag_source default 'user',
    primary key (item_id, tag_id)
);

-- Item embeddings table for visual search
create table public.item_embeddings (
    item_id bigint references public.items(id) on delete cascade not null primary key,
    embedding vector(512),
    caption text,
    model_name text
);

-- Claims table for users to claim items
create table public.claims (
    id bigint generated by default as identity primary key,
    created_at timestamp with time zone not null default now(),
    item_id bigint references public.items(id) on delete cascade not null,
    claimant_id uuid references public.profiles(id) on delete cascade not null,
    status public.claim_status default 'pending' not null,
    unique (item_id, claimant_id) -- A user can only claim an item once
);

-- Conversations table for messaging
create table public.conversations (
    id bigint generated by default as identity primary key,
    created_at timestamp with time zone not null default now(),
    claim_id bigint references public.claims(id) on delete cascade not null,
    participant_one uuid references public.profiles(id) on delete cascade not null,
    participant_two uuid references public.profiles(id) on delete cascade not null,
    e2ee_enabled boolean default false not null
);

-- Messages table for chat
create table public.messages (
    id bigint generated by default as identity primary key,
    created_at timestamp with time zone not null default now(),
    conversation_id bigint references public.conversations(id) on delete cascade not null,
    sender_id uuid references public.profiles(id) on delete cascade not null,
    content_encrypted text,
    content_plaintext text,
    is_read boolean default false not null
);
create index messages_conversation_id_idx on public.messages (conversation_id, created_at desc);

-- Reports table for moderation
create table public.reports (
    id bigint generated by default as identity primary key,
    created_at timestamp with time zone not null default now(),
    item_id bigint references public.items(id) on delete cascade,
    image_id bigint references public.images(id) on delete cascade,
    reported_by uuid references public.profiles(id) on delete set null,
    reason text,
    status public.report_status default 'pending' not null
);

-- Saved Searches table
create table public.saved_searches (
    id bigint generated by default as identity primary key,
    created_at timestamp with time zone not null default now(),
    user_id uuid references public.profiles(id) on delete cascade not null,
    search_query text,
    tags text[],
    location geography(Point, 4326),
    radius_km integer,
    last_notified_at timestamp with time zone
);

-- Notifications table
create table public.notifications (
    id bigint generated by default as identity primary key,
    created_at timestamp with time zone not null default now(),
    user_id uuid references public.profiles(id) on delete cascade not null,
    message text not null,
    link_url text,
    is_read boolean default false not null
);

-- Push Tokens table for mobile notifications
create table public.push_tokens (
    id bigint generated by default as identity primary key,
    created_at timestamp with time zone not null default now(),
    user_id uuid references public.profiles(id) on delete cascade not null,
    token text not null unique,
    device_info text
);

--
-- DEFINE FUNCTIONS AND TRIGGERS
--

-- Function to create a new profile for a new user from auth.users
create or replace function public.handle_new_user()
returns trigger as $$
begin
  insert into public.profiles (id, display_name, avatar_url)
  values (new.id, new.raw_user_meta_data->>'full_name', new.raw_user_meta_data->>'avatar_url');
  return new;
end;
$$ language plpgsql security definer;

-- Trigger to execute the function after a new user is created
create trigger on_auth_user_created
  after insert on auth.users
  for each row execute procedure public.handle_new_user();

-- Function to handle updated_at timestamps
create or replace function public.update_updated_at_column()
returns trigger as $$
begin
   new.updated_at = now();
   return new;
end;
$$ language plpgsql;

-- Trigger to update the updated_at column on profiles
create trigger handle_updated_at
  before update on public.profiles
  for each row execute procedure public.update_updated_at_column();

-- Trigger to update the updated_at column on items
create trigger handle_updated_at
  before update on public.items
  for each row execute procedure public.update_updated_at_column();

--
-- ROW-LEVEL SECURITY (RLS) POLICIES
--

-- Helper function to get user's ID from the request JWT
create or replace function auth.uid() returns uuid as $$
  select nullif(current_setting('request.jwt.claims', true)::json->>'sub', '')::uuid;
$$ language sql stable;

-- PROFILES
alter table public.profiles enable row level security;
create policy "Users can view their own profile" on public.profiles for select using (auth.uid() = id);
create policy "Users can update their own profile" on public.profiles for update using (auth.uid() = id) with check (auth.uid() = id);

-- ITEMS
alter table public.items enable row level security;
create policy "Items are publicly visible if active" on public.items for select using (status = 'active');
create policy "Users can insert their own items" on public.items for insert with check (auth.uid() = created_by);
create policy "Users can update their own items" on public.items for update using (auth.uid() = created_by) with check (auth.uid() = created_by);
create policy "Users can delete their own items" on public.items for delete using (auth.uid() = created_by);

-- IMAGES
alter table public.images enable row level security;
create policy "Images are visible if item is active" on public.images for select using (
    exists (
        select 1 from public.items
        where items.id = images.item_id and items.status = 'active'
    )
);
create policy "Users can insert images for their own items" on public.images for insert with check (auth.uid() = created_by);
create policy "Users can delete their own images" on public.images for delete using (auth.uid() = created_by);

-- TAGS & ITEM_TAGS
alter table public.tags enable row level security;
alter table public.item_tags enable row level security;
create policy "Tags are public" on public.tags for select using (true);
create policy "Authenticated users can insert tags" on public.tags for insert to authenticated with check (true);
create policy "Item tags are visible if item is active" on public.item_tags for select using (
    exists (
        select 1 from public.items
        where items.id = item_tags.item_id and items.status = 'active'
    )
);
create policy "Users can insert tags for their own items" on public.item_tags for insert with check (
    exists (
        select 1 from public.items
        where items.id = item_tags.item_id and items.created_by = auth.uid()
    )
);
create policy "Users can delete tags from their own items" on public.item_tags for delete using (
    exists (
        select 1 from public.items
        where items.id = item_tags.item_id and items.created_by = auth.uid()
    )
);

-- CLAIMS
alter table public.claims enable row level security;
create policy "Claimants and item owners can see claims" on public.claims for select using (
    auth.uid() = claimant_id or
    exists (
        select 1 from public.items
        where items.id = claims.item_id and items.created_by = auth.uid()
    )
);
create policy "Users can insert their own claims" on public.claims for insert with check (auth.uid() = claimant_id);
create policy "Item owners can update claims" on public.claims for update using (
    exists (
        select 1 from public.items
        where items.id = claims.item_id and items.created_by = auth.uid()
    )
);

-- CONVERSATIONS
alter table public.conversations enable row level security;
create policy "Participants can see their conversations" on public.conversations for select using (
    auth.uid() = participant_one or auth.uid() = participant_two
);
create policy "Participants can insert conversations" on public.conversations for insert with check (
    auth.uid() = participant_one or auth.uid() = participant_two
);

-- MESSAGES
alter table public.messages enable row level security;
create policy "Participants can see messages in their conversations" on public.messages for select using (
    exists (
        select 1 from public.conversations
        where conversations.id = messages.conversation_id
        and (conversations.participant_one = auth.uid() or conversations.participant_two = auth.uid())
    )
);
create policy "Participants can insert messages in their conversations" on public.messages for insert with check (
    sender_id = auth.uid() and
    exists (
        select 1 from public.conversations
        where conversations.id = messages.conversation_id
        and (conversations.participant_one = auth.uid() or conversations.participant_two = auth.uid())
    )
);

-- PUSH TOKENS
alter table public.push_tokens enable row level security;
create policy "Users can manage their own push tokens" on public.push_tokens for all using (auth.uid() = user_id) with check (auth.uid() = user_id);

-- SAVED SEARCHES
alter table public.saved_searches enable row level security;
create policy "Users can manage their own saved searches" on public.saved_searches for all using (auth.uid() = user_id) with check (auth.uid() = user_id);

-- NOTIFICATIONS
alter table public.notifications enable row level security;
create policy "Users can see their own notifications" on public.notifications for select using (auth.uid() = user_id);
create policy "Users can update their own notifications" on public.notifications for update using (auth.uid() = user_id) with check (auth.uid() = user_id);

-- Default-deny policies for other tables
alter table public.facilities enable row level security;
alter table public.units enable row level security;
alter table public.reports enable row level security;
alter table public.item_embeddings enable row level security;

-- Allow read access to embeddings for active items
create policy "Embeddings are visible if item is active" on public.item_embeddings for select using (
    exists (
        select 1 from public.items
        where items.id = item_embeddings.item_id and items.status = 'active'
    )
);

--
-- CREATE PUBLIC VIEWS
--

-- A sanitized view of user profiles for public access
create or replace view public.profiles_public as
select
  id,
  case
    when is_anonymized then 'Anonymous User'
    else display_name
  end as display_name,
  avatar_url
from public.profiles;

-- A sanitized view of items for the public marketing site gallery
create or replace view public.items_public as
select
  i.id,
  i.created_at,
  i.title,
  left(i.description, 100) as description_snippet,
  f.city,
  f.state,
  (
    select images.storage_path_thumbnail
    from public.images
    where images.item_id = i.id
    order by images.created_at
    limit 1
  ) as thumbnail_url
from public.items as i
left join public.units u on i.unit_id = u.id
left join public.facilities f on u.facility_id = f.id
where i.status = 'active'
order by i.created_at desc;
