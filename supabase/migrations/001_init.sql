-- Supabase initial schema for Storage Connection

-- Enable PostgreSQL extensions
create extension if not exists "postgis" with schema "extensions";
create extension if not exists "vector" with schema "extensions";

-- Custom types
create type public.item_status as enum ('active', 'expired', 'claimed', 'review', 'deleted');
create type public.claim_status as enum ('pending', 'approved', 'rejected');
create type public.report_status as enum ('open', 'resolved');

-- Tables
create table public.profiles (
  id uuid primary key references auth.users(id) on delete cascade,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  display_name text,
  e2ee_enabled boolean not null default false,
  deleted_at timestamptz
);
comment on table public.profiles is 'User profiles, extending auth.users.';

create table public.facilities (
  id uuid primary key default gen_random_uuid(),
  created_at timestamptz not null default now(),
  name text not null,
  address text,
  location geography(Point, 4326)
);
comment on table public.facilities is 'Storage facilities where units are located.';

create table public.units (
  id uuid primary key default gen_random_uuid(),
  facility_id uuid references public.facilities(id),
  unit_number text,
  auction_date timestamptz,
  created_at timestamptz not null default now()
);
comment on table public.units is 'Individual storage units within a facility.';

create table public.items (
  id uuid primary key default gen_random_uuid(),
  created_by uuid not null references auth.users(id),
  unit_id uuid references public.units(id),
  description text,
  description_auto text,
  is_sentimental boolean not null default false,
  status public.item_status not null default 'active',
  expires_at timestamptz not null,
  location geography(Point, 4326),
  tsv tsvector generated always as (to_tsvector('english', coalesce(description, '') || ' ' || coalesce(description_auto, ''))) stored,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  deleted_at timestamptz
);
comment on table public.items is 'Items found in storage units.';

create table public.images (
  id uuid primary key default gen_random_uuid(),
  item_id uuid not null references public.items(id) on delete cascade,
  created_by uuid not null references auth.users(id),
  storage_path_raw text not null,
  storage_path_thumbnail text,
  has_pii boolean not null default false,
  created_at timestamptz not null default now()
);
comment on table public.images is 'Images associated with an item.';

create table public.tags (
  id uuid primary key default gen_random_uuid(),
  name text not null unique,
  created_at timestamptz not null default now()
);
comment on table public.tags is 'Tags for items, generated by AI or users.';

create table public.item_tags (
  item_id uuid not null references public.items(id) on delete cascade,
  tag_id uuid not null references public.tags(id) on delete cascade,
  confidence real,
  tag_source text,
  created_at timestamptz not null default now(),
  primary key (item_id, tag_id)
);
comment on table public.item_tags is 'Associates tags with items.';

create table public.item_embeddings (
  item_id uuid primary key references public.items(id) on delete cascade,
  embedding public.vector(512),
  embedding_source text,
  created_at timestamptz not null default now()
);
comment on table public.item_embeddings is 'Embeddings for visual similarity search.';

create table public.claims (
  id uuid primary key default gen_random_uuid(),
  item_id uuid not null references public.items(id),
  claimant_id uuid not null references auth.users(id),
  status public.claim_status not null default 'pending',
  created_at timestamptz not null default now()
);
comment on table public.claims is 'Claims made by users on items.';

create table public.conversations (
  id uuid primary key default gen_random_uuid(),
  claim_id uuid not null unique references public.claims(id),
  item_owner_id uuid not null references auth.users(id),
  claimant_id uuid not null references auth.users(id),
  created_at timestamptz not null default now()
);
comment on table public.conversations is 'Conversations between item owners and claimants.';

create table public.messages (
  id uuid primary key default gen_random_uuid(),
  conversation_id uuid not null references public.conversations(id) on delete cascade,
  sender_id uuid not null references auth.users(id),
  content_ciphertext text,
  content_plaintext text,
  is_encrypted boolean not null default false,
  created_at timestamptz not null default now()
);
comment on table public.messages is 'Messages within a conversation.';

create table public.reports (
  id uuid primary key default gen_random_uuid(),
  item_id uuid not null references public.items(id),
  reporter_id uuid references auth.users(id),
  reason text,
  status public.report_status not null default 'open',
  created_at timestamptz not null default now()
);
comment on table public.reports is 'Reports for moderation.';

create table public.saved_searches (
  id uuid primary key default gen_random_uuid(),
  user_id uuid not null references auth.users(id) on delete cascade,
  query_text text,
  tags text[],
  location geography(Point, 4326),
  radius_km integer,
  created_at timestamptz not null default now()
);
comment on table public.saved_searches is 'User-saved searches for notifications.';

create table public.notifications (
  id uuid primary key default gen_random_uuid(),
  user_id uuid not null references auth.users(id) on delete cascade,
  item_id uuid references public.items(id),
  saved_search_id uuid references public.saved_searches(id),
  type text not null,
  read boolean not null default false,
  created_at timestamptz not null default now()
);
comment on table public.notifications is 'Notifications for users.';

create table public.push_tokens (
  token text primary key,
  user_id uuid not null references auth.users(id) on delete cascade,
  created_at timestamptz not null default now()
);
comment on table public.push_tokens is 'Expo push tokens for users.';

-- Indexes
create index on public.items using gin (tsv);
create index on public.items using gist (location);
create index on public.item_tags (tag_id, item_id);
create index on public.item_embeddings using ivfflat (embedding public.vector_l2_ops) with (lists = 100);

-- RLS Policies
alter table public.profiles enable row level security;
alter table public.facilities enable row level security;
alter table public.units enable row level security;
alter table public.items enable row level security;
alter table public.images enable row level security;
alter table public.tags enable row level security;
alter table public.item_tags enable row level security;
alter table public.item_embeddings enable row level security;
alter table public.claims enable row level security;
alter table public.conversations enable row level security;
alter table public.messages enable row level security;
alter table public.reports enable row level security;
alter table public.saved_searches enable row level security;
alter table public.notifications enable row level security;
alter table public.push_tokens enable row level security;

create policy "Users can view their own profile" on public.profiles for select using (auth.uid() = id);
create policy "Users can update their own profile" on public.profiles for update using (auth.uid() = id) with check (auth.uid() = id);
create policy "Allow public read access" on public.facilities for select using (true);
create policy "Allow public read access" on public.units for select using (true);
create policy "Allow public read access" on public.tags for select using (true);
create policy "Public can view active items" on public.items for select using (status = 'active');
create policy "Users can insert their own items" on public.items for insert with check (auth.uid() = created_by);
create policy "Users can update their own items" on public.items for update using (auth.uid() = created_by) with check (auth.uid() = created_by);
create policy "Public can view images of active items" on public.images for select using (exists (select 1 from public.items where items.id = images.item_id and items.status = 'active'));
create policy "Users can insert images for their own items" on public.images for insert with check (auth.uid() = created_by and exists (select 1 from public.items where items.id = images.item_id and items.created_by = auth.uid()));
create policy "Users can update their own images" on public.images for update using (auth.uid() = created_by) with check (auth.uid() = created_by);
create policy "Public can view tags/embeddings of active items" on public.item_tags for select using (exists (select 1 from public.items where items.id = item_tags.item_id and items.status = 'active'));
create policy "Users can insert tags for their own items" on public.item_tags for insert with check (exists (select 1 from public.items where items.id = item_tags.item_id and items.created_by = auth.uid()));
create policy "Public can view tags/embeddings of active items" on public.item_embeddings for select using (exists (select 1 from public.items where items.id = item_embeddings.item_id and items.status = 'active'));
create policy "Users can insert embeddings for their own items" on public.item_embeddings for insert with check (exists (select 1 from public.items where items.id = item_embeddings.item_id and items.created_by = auth.uid()));
create policy "Participants can view claims" on public.claims for select using (claimant_id = auth.uid() or exists (select 1 from public.items where items.id = claims.item_id and items.created_by = auth.uid()));
create policy "Authenticated users can create claims" on public.claims for insert with check (auth.role() = 'authenticated');
create policy "Participants can view conversations" on public.conversations for select using (claimant_id = auth.uid() or item_owner_id = auth.uid());
create policy "Claimant can create conversation" on public.conversations for insert with check (claimant_id = auth.uid());
create policy "Participants can view messages" on public.messages for select using (exists (select 1 from public.conversations where conversations.id = messages.conversation_id and (conversations.claimant_id = auth.uid() or conversations.item_owner_id = auth.uid())));
create policy "Participants can insert messages" on public.messages for insert with check (exists (select 1 from public.conversations where conversations.id = messages.conversation_id and (conversations.claimant_id = auth.uid() or conversations.item_owner_id = auth.uid())));
create policy "Authenticated users can create reports" on public.reports for insert with check (auth.role() = 'authenticated');
create policy "Users can manage their own saved searches" on public.saved_searches for all using (auth.uid() = user_id) with check (auth.uid() = user_id);
create policy "Users can manage their own notifications" on public.notifications for all using (auth.uid() = user_id) with check (auth.uid() = user_id);
create policy "Users can manage their own push tokens" on public.push_tokens for all using (auth.uid() = user_id) with check (auth.uid() = user_id);

-- Views
create or replace view public.items_public as
select
  i.id,
  i.description,
  i.description_auto,
  i.created_at,
  (select images.storage_path_thumbnail from public.images where item_id = i.id order by created_at limit 1) as thumbnail_url
from
  public.items i
where
  i.status = 'active';

create or replace view public.profiles_public as
select
  p.id,
  p.display_name
from
  public.profiles p
where
  p.deleted_at is null;
